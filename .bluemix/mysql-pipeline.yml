---
stages:
- name: Build MySQL Container Image
  inputs:
  - service: ${REPO}
    type: git
    branch: master
  jobs:
  - name: Build Standalone MySQL Container Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${MYSQL_CONTAINER}
    USE_CACHED_LAYERS: 'true'
    COMMAND: "#!/bin/bash\n# The following colors have been defined to help with presentation\
      \ of logs: green, red, label_color, no_color.  \nlog_and_echo \"$LABEL\" \"\
      Starting build script\"\n\ncd mysql\n\n# The IBM Container BM Containers plug-in\
      \ (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.\n\
      # Based on the organization and space selected in the Job credentials are in\
      \ place for both IBM Container Service and IBM Bluemix \n#####################\n\
      # Run unit tests    #\n#####################\nlog_and_echo \"$LABEL\" \"No unit\
      \ tests cases have been checked in\"\n\n######################################\n\
      # Build Container via Dockerfile     #\n######################################\n\
      SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed \"s/\\(.*\\\
      )\\((.*\\)/\\1/\")\nIMAGE_NAME=$(echo $IMAGE_NAME|sed \"s/-$SPACE//\")\nREGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}\n\n# REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      # FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}\n\
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property\
      \ on the stage.\n\nif [ -f Dockerfile ]; then \n    log_and_echo \"$LABEL\"\
      \ \"Building ${FULL_REPOSITORY_NAME}\"\n    ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l info -m \"New container build requested for ${FULL_REPOSITORY_NAME}\"\n\
      \    # build image\n    BUILD_COMMAND=\"\"\n    if [ \"${USE_CACHED_LAYERS}\"\
      \ == \"true\" ]; then \n        BUILD_COMMAND=\"build --pull --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}/mysql\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n\
      \    else \n        BUILD_COMMAND=\"build --no-cache --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}/mysql\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n\
      \    fi \n\n    if [ $RESULT -ne 0 ]; then\n        log_and_echo \"$ERROR\"\
      \ \"Error building image\"\n        ice_retry info \n        ice_retry images\n\
      \        ${EXT_DIR}/print_help.sh\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l bad -m \"Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)\"\
      \n        exit 1\n    else\n        log_and_echo \"$SUCCESSFUL\" \"Container\
      \ build of ${FULL_REPOSITORY_NAME} was successful\"\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l good -m \"Container build of ${FULL_REPOSITORY_NAME} was successful\"\n\
      \    fi  \nelse \n    log_and_echo \"$ERROR\" \"Dockerfile not found in project\"\
      \n    ${EXT_DIR}/utilities/sendMessage.sh -l bad -m \"Failed to get Dockerfile.\
      \ $(get_error_info)\"\n    exit 1\nfi  \n\n######################################################################################\n\
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE\
      \    #\n######################################################################################\n\
      echo \"IMAGE_NAME=${FULL_REPOSITORY_NAME}\" >> $ARCHIVE_DIR/build.properties"
- name: Deploy Standalone MySQL Container
  inputs:
  - type: job
    stage: Build MySQL Container Image
    job: Build Standalone MySQL Container Image
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: MYSQL_CONTAINER_NAME
    value: ${MYSQL_CONTAINER}
    type: text
  - name: MYSQL_IMAGE_NAME
    value: ${MYSQL_CONTAINER}
    type: text
  - name: MYSQL_MEMORY
    value: '128'
    type: text
  - name: MYSQL_DATABASE
    value: ${MYSQL_DATABASE}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    type: secure
    value: ${MYSQL_PASSWORD}
  - name: MYSQL_ROOT_PASSWORD
    type: secure
    value: ${MYSQL_ROOT_PASSWORD}
  jobs:
  - name: Deploy Standalone MySQL Container
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    PORT: '3306'
    OPTIONAL_ARGS: -m ${MYSQL_MEMORY} -e MYSQL_DATABASE=${MYSQL_DATABASE} -e MYSQL_USER=${MYSQL_USER} -e MYSQL_PASSWORD=${MYSQL_PASSWORD} -e MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    CONTAINER_NAME: ${MYSQL_CONTAINER}
    DEPLOY_TYPE: red_black
    COMMAND: "#!/bin/bash \n\ndebugme() {\n  [[ $DEBUG = 1 ]] && \"$@\" || :\n}\n\n\
      \n# Build Container via Dockerfile     #\nSPACE=$($IC_COMMAND info|grep 'Bluemix\
      \ Space'|awk '{print $NF}'|sed \"s/\\(.*\\)\\((.*\\)/\\1/\")\nIMAGE_NAME=$(echo\
      \ ${MYSQL_IMAGE_NAME}|sed \"s/-$SPACE//\")\nREGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      IMAGE_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}\nCONTAINER_NAME=${MYSQL_CONTAINER_NAME}\n\
      \n# git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts\n\
      \n# function to wait for a container to start\n# takes a container name as the\
      \ only parameter\nwait_for (){\n    local WAITING_FOR=$1\n    if [ -z ${WAITING_FOR}\
      \ ]; then\n        log_and_echo \"$ERROR\" \"Expected container name to be passed\
      \ into wait_for\"\n        return 1\n    fi\n    local COUNTER=0\n    local\
      \ STATE=\"unknown\"\n    while [[ ( $COUNTER -lt 180 ) && (\"${STATE}\" != \"\
      Running\") && (\"${STATE}\" != \"Crashed\") ]]; do\n        let COUNTER=COUNTER+1\n\
      \        STATE=$($IC_COMMAND inspect $WAITING_FOR 2> /dev/null | grep \"Status\"\
      \ | awk '{print $2}' | sed 's/\"//g')\n        if [ -z \"${STATE}\" ]; then\n\
      \            STATE=\"being placed\"\n        fi\n        log_and_echo \"${WAITING_FOR}\
      \ is ${STATE}\"\n        sleep 3\n    done\n    if [ \"$STATE\" == \"Crashed\"\
      \ ]; then\n        return 2\n    fi\n    if [ \"$STATE\" != \"Running\" ]; then\n\
      \        log_and_echo \"$ERROR\" \"Failed to start instance \"\n        return\
      \ 1\n    fi\n    return 0\n}\n\n# function to wait for a container to be deleted\n\
      # takes a container name as the only parameter\nwait_for_deleted (){\n    local\
      \ WAITING_FOR=$1\n    if [ -z ${WAITING_FOR} ]; then\n        log_and_echo \"\
      $ERROR\" \"Expected container name to be passed into wait_for\"\n        return\
      \ 1\n    fi\n    local COUNTER=0\n    local FOUND=0\n    while [[ ( $COUNTER\
      \ -lt 60 ) && (\"${STATE}\" != \"Shutdown\")  ]]; do\n        let COUNTER=COUNTER+1\n\
      \        ice_retry inspect ${CONTAINER_NAME} 2>/dev/null\n        RESULT=$?\n\
      \        if [ ${RESULT} -ne 0 ]; then \n            STATE=\"being deleted\"\n\
      \        else\n            STATE=\"deleted\"\n            break\n        fi\n\
      \        sleep 2\n    done\n    if [ \"$STATE\" != \"deleted\" ]; then\n   \
      \     log_and_echo \"$ERROR\" \"Failed to stop instance $WAITING_FOR \"\n  \
      \      return 1\n    else\n        log_and_echo \"Successfully stopped $WAITING_FOR\"\
      \n    fi\n    return 0\n}\n\nlog_and_echo \"deploying container ${CONTAINER_NAME}\"\
      \n\n# check to see if that container name is already in use\nice_retry_save_output\
      \ ps -a 2> /dev/null\n\nCONTAINER_NAME_ARRAY=$(grep ${CONTAINER_NAME} iceretry.log\
      \ | awk '{print $2}')\nif [ -n \"${CONTAINER_NAME_ARRAY}\" ]; then\n    log_and_echo\
      \ \"removing container: ${CONTAINER_NAME}\"\n    ice_retry rm -f ${CONTAINER_NAME}\n\
      \    wait_for_deleted ${CONTAINER_NAME}\nfi\n\n# run the container and check\
      \ the results\nlog_and_echo \"run the container: $IC_COMMAND run --name ${CONTAINER_NAME}\
      \ -p ${PORT}:${PORT} ${MEMORY} ${OPTIONAL_ARGS} ${IMAGE_NAME} \"\nice_retry\
      \ run --name ${CONTAINER_NAME} -p ${PORT}:${PORT} ${OPTIONAL_ARGS} ${IMAGE_NAME}\
      \ 2> /dev/null\nRESULT=$?\nif [ $RESULT -ne 0 ]; then\n    log_and_echo \"$ERROR\"\
      \ \"Failed to deploy ${CONTAINER_NAME} using ${IMAGE_NAME}\"\n    dump_info\n\
      \    return 1\nfi\n\n# wait for container to start\nwait_for ${CONTAINER_NAME}\n\
      RESULT=$?\nif [ $RESULT -eq 0 ]; then\n    ${IC_COMMAND} exec -it ${CONTAINER_NAME}\
      \ sh load-data.sh\n    echo \"inventorydb created in mysql container. Done!\"\
      \n    exit 0\nfi\n"
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
