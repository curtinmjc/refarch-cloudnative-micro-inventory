---
stages:
- name: BUILD
  inputs:
  - service: ${REPO}
    type: git
    branch: master
  triggers:
  - type: commit
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: gradle
    script: |-
      #!/bin/bash
      # The default Gradle version is 1.12
      # To use Gradle 2.9, uncomment the following line:
      #export PATH="$GRADLE2_HOME/bin:$PATH"

      echo "Run gradle build..."
      export JAVA_HOME=~/java8
      export PATH=$JAVA_HOME/bin:$PATH
      ./gradlew build
      echo "Gradle build complete."
- name: Build Container Images
  inputs:
  - type: job
    stage: BUILD
    job: Build
    dir_name: null
  triggers:
  - type: stage
  jobs:
  - name: Build Inventory Microservice Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${IMAGE_NAME}
    USE_CACHED_LAYERS: 'true'
    COMMAND: |-
      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      log_and_echo "$LABEL" "Starting build script"

      pwd
      ls build/libs

      echo "Run Gradle docker build."
      ./gradlew docker
      ls -al docker
      cp -R docker/* .
      ls -al $PWD
      echo "Gradle docker build complete."



      # The IBM Container BM Containers plug-in (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix
      #####################
      # Run unit tests    #
      #####################
      log_and_echo "$LABEL" "No unit tests cases have been checked in"

      ######################################
      # Build Container via Dockerfile     #
      ######################################
      SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
      )
      IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
      REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property on the stage.

      if [ -f Dockerfile ]; then
          log_and_echo "$LABEL" "Building ${FULL_REPOSITORY_NAME}"
          ${EXT_DIR}/utilities/sendMessage.sh -l info -m "New container build requested for ${FULL_REPOSITORY_NAME}"
          # build image
          BUILD_COMMAND=""
          if [ "${USE_CACHED_LAYERS}" == "true" ]; then
              BUILD_COMMAND="build --pull --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          else
              BUILD_COMMAND="build --no-cache --tag ${FULL_REPOSITORY_NAME} ${WORKSPACE}"
              ice_retry ${BUILD_COMMAND}
              RESULT=$?
          fi

          if [ $RESULT -ne 0 ]; then
              log_and_echo "$ERROR" "Error building image"
              ice_retry info
              ice_retry images
              ${EXT_DIR}/print_help.sh
              ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)"
              exit 1
          else
              log_and_echo "$SUCCESSFUL" "Container build of ${FULL_REPOSITORY_NAME} was successful"
              ${EXT_DIR}/utilities/sendMessage.sh -l good -m "Container build of ${FULL_REPOSITORY_NAME} was successful"
          fi
      else
          log_and_echo "$ERROR" "Dockerfile not found in project"
          ${EXT_DIR}/utilities/sendMessage.sh -l bad -m "Failed to get Dockerfile. $(get_error_info)"
          exit 1
      fi

      ######################################################################################
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE    #
      ######################################################################################
      echo "IMAGE_NAME=${FULL_REPOSITORY_NAME}" >> $ARCHIVE_DIR/build.properties
  - name: Build MySQL Image
    type: builder
    extension_id: ibm.devops.services.pipeline.container.builder
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    IMAGE_NAME: ${MYSQL_CONTAINER}
    USE_CACHED_LAYERS: 'true'
    COMMAND: "#!/bin/bash\n# The following colors have been defined to help with presentation\
      \ of logs: green, red, label_color, no_color.  \nlog_and_echo \"$LABEL\" \"\
      Starting build script\"\n\ncd mysql\n\n# The IBM Container BM Containers plug-in\
      \ (cf ic), Git client (git), and IDS Inventory CLI (ids-inv) have been installed.\n\
      # Based on the organization and space selected in the Job credentials are in\
      \ place for both IBM Container Service and IBM Bluemix \n#####################\n\
      # Run unit tests    #\n#####################\nlog_and_echo \"$LABEL\" \"No unit\
      \ tests cases have been checked in\"\n\n######################################\n\
      # Build Container via Dockerfile     #\n######################################\n\
      SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed \"s/\\(.*\\\
      )\\((.*\\)/\\1/\")\nIMAGE_NAME=$(echo $IMAGE_NAME|sed \"s/-$SPACE//\")\nREGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}\n\n# REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      # FULL_REPOSITORY_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${APPLICATION_VERSION}\n\
      # If you wish to receive slack notifications, set SLACK_WEBHOOK_PATH as a property\
      \ on the stage.\n\nif [ -f Dockerfile ]; then \n    log_and_echo \"$LABEL\"\
      \ \"Building ${FULL_REPOSITORY_NAME}\"\n    ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l info -m \"New container build requested for ${FULL_REPOSITORY_NAME}\"\n\
      \    # build image\n    BUILD_COMMAND=\"\"\n    if [ \"${USE_CACHED_LAYERS}\"\
      \ == \"true\" ]; then \n        BUILD_COMMAND=\"build --pull --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}/mysql\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n\
      \    else \n        BUILD_COMMAND=\"build --no-cache --tag ${FULL_REPOSITORY_NAME}\
      \ ${WORKSPACE}/mysql\"\n        ice_retry ${BUILD_COMMAND}\n        RESULT=$?\n\
      \    fi \n\n    if [ $RESULT -ne 0 ]; then\n        log_and_echo \"$ERROR\"\
      \ \"Error building image\"\n        ice_retry info \n        ice_retry images\n\
      \        ${EXT_DIR}/print_help.sh\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l bad -m \"Container build of ${FULL_REPOSITORY_NAME} failed. $(get_error_info)\"\
      \n        exit 1\n    else\n        log_and_echo \"$SUCCESSFUL\" \"Container\
      \ build of ${FULL_REPOSITORY_NAME} was successful\"\n        ${EXT_DIR}/utilities/sendMessage.sh\
      \ -l good -m \"Container build of ${FULL_REPOSITORY_NAME} was successful\"\n\
      \    fi  \nelse \n    log_and_echo \"$ERROR\" \"Dockerfile not found in project\"\
      \n    ${EXT_DIR}/utilities/sendMessage.sh -l bad -m \"Failed to get Dockerfile.\
      \ $(get_error_info)\"\n    exit 1\nfi  \n\n######################################################################################\n\
      # Copy any artifacts that will be needed for deployment and testing to $WORKSPACE\
      \    #\n######################################################################################\n\
      echo \"IMAGE_NAME=${FULL_REPOSITORY_NAME}\" >> $ARCHIVE_DIR/build.properties"
- name: Scan Image
  inputs:
  - type: job
    stage: Build Container Images
    job: Build Inventory Microservice Image
    dir_name: null
  jobs:
  - name: Vulnerability Scan
    type: tester
    extension_id: ibm.devops.services.pipeline.crawler.tester
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    WAIT_TIME: '10'
- name: Deploy MySQL Container
  inputs:
  - type: job
    stage: Build Container Images
    job: Build MySQL Image
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: MYSQL_CONTAINER_NAME
    value: ${MYSQL_TEST_CONTAINER}
    type: text
  - name: MYSQL_IMAGE_NAME
    value: ${MYSQL_CONTAINER}
    type: text
  - name: MYSQL_MEMORY
    value: '128'
    type: text
  - name: MYSQL_DATABASE
    value: ${MYSQL_DATABASE}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    value: ${MYSQL_PASSWORD}
    type: secure
  - name: MYSQL_ROOT_PASSWORD
    type: secure
  jobs:
  - name: Redeploy MySQL Container
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${MYSQL_PORT}
    OPTIONAL_ARGS: -m ${MYSQL_MEMORY} -e MYSQL_DATABASE=${MYSQL_DATABASE} -e MYSQL_USER=${MYSQL_USER} -e MYSQL_PASSWORD=${MYSQL_PASSWORD} -e MYSQL_ALLOW_EMPTY_PASSWORD=true
    DEPLOY_TYPE: red_black
    CONTAINER_NAME: ${MYSQL_CONTAINER}
    COMMAND: "#!/bin/bash \n\ndebugme() {\n  [[ $DEBUG = 1 ]] && \"$@\" || :\n}\n\n\
      \n# Build Container via Dockerfile     #\nSPACE=$($IC_COMMAND info|grep 'Bluemix\
      \ Space'|awk '{print $NF}'|sed \"s/\\(.*\\)\\((.*\\)/\\1/\")\nIMAGE_NAME=$(echo\
      \ ${MYSQL_IMAGE_NAME}|sed \"s/-$SPACE//\")\nREGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}\n\
      IMAGE_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}\nCONTAINER_NAME=${MYSQL_CONTAINER_NAME}\n\
      \n# git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts\n\
      \n# function to wait for a container to start\n# takes a container name as the\
      \ only parameter\nwait_for (){\n    local WAITING_FOR=$1\n    if [ -z ${WAITING_FOR}\
      \ ]; then\n        log_and_echo \"$ERROR\" \"Expected container name to be passed\
      \ into wait_for\"\n        return 1\n    fi\n    local COUNTER=0\n    local\
      \ STATE=\"unknown\"\n    while [[ ( $COUNTER -lt 180 ) && (\"${STATE}\" != \"\
      Running\") && (\"${STATE}\" != \"Crashed\") ]]; do\n        let COUNTER=COUNTER+1\n\
      \        STATE=$($IC_COMMAND inspect $WAITING_FOR 2> /dev/null | grep \"Status\"\
      \ | awk '{print $2}' | sed 's/\"//g')\n        if [ -z \"${STATE}\" ]; then\n\
      \            STATE=\"being placed\"\n        fi\n        log_and_echo \"${WAITING_FOR}\
      \ is ${STATE}\"\n        sleep 3\n    done\n    if [ \"$STATE\" == \"Crashed\"\
      \ ]; then\n        return 2\n    fi\n    if [ \"$STATE\" != \"Running\" ]; then\n\
      \        log_and_echo \"$ERROR\" \"Failed to start instance \"\n        return\
      \ 1\n    fi\n    return 0\n}\n\n# function to wait for a container to be deleted\n\
      # takes a container name as the only parameter\nwait_for_deleted (){\n    local\
      \ WAITING_FOR=$1\n    if [ -z ${WAITING_FOR} ]; then\n        log_and_echo \"\
      $ERROR\" \"Expected container name to be passed into wait_for\"\n        return\
      \ 1\n    fi\n    local COUNTER=0\n    local FOUND=0\n    while [[ ( $COUNTER\
      \ -lt 60 ) && (\"${STATE}\" != \"Shutdown\")  ]]; do\n        let COUNTER=COUNTER+1\n\
      \        ice_retry inspect ${CONTAINER_NAME} 2>/dev/null\n        RESULT=$?\n\
      \        if [ ${RESULT} -ne 0 ]; then \n            STATE=\"being deleted\"\n\
      \        else\n            STATE=\"deleted\"\n            break\n        fi\n\
      \        sleep 2\n    done\n    if [ \"$STATE\" != \"deleted\" ]; then\n   \
      \     log_and_echo \"$ERROR\" \"Failed to stop instance $WAITING_FOR \"\n  \
      \      return 1\n    else\n        log_and_echo \"Successfully stopped $WAITING_FOR\"\
      \n    fi\n    return 0\n}\n\nlog_and_echo \"deploying container ${CONTAINER_NAME}\"\
      \n\n# check to see if that container name is already in use\nice_retry_save_output\
      \ ps -a 2> /dev/null\n\nCONTAINER_NAME_ARRAY=$(grep ${CONTAINER_NAME} iceretry.log\
      \ | awk '{print $2}')\nif [ -n \"${CONTAINER_NAME_ARRAY}\" ]; then\n    log_and_echo\
      \ \"removing container: ${CONTAINER_NAME}\"\n    ice_retry rm -f ${CONTAINER_NAME}\n\
      \    wait_for_deleted ${CONTAINER_NAME}\nfi\n\n# run the container and check\
      \ the results\nlog_and_echo \"run the container: $IC_COMMAND run --name ${CONTAINER_NAME}\
      \ -p ${PORT}:${PORT} ${MEMORY} ${OPTIONAL_ARGS} ${IMAGE_NAME} \"\nice_retry\
      \ run --name ${CONTAINER_NAME} -p ${PORT}:${PORT} ${OPTIONAL_ARGS} ${IMAGE_NAME}\
      \ 2> /dev/null\nRESULT=$?\nif [ $RESULT -ne 0 ]; then\n    log_and_echo \"$ERROR\"\
      \ \"Failed to deploy ${CONTAINER_NAME} using ${IMAGE_NAME}\"\n    dump_info\n\
      \    return 1\nfi\n\n# wait for container to start\nwait_for ${CONTAINER_NAME}\n\
      RESULT=$?\nif [ $RESULT -eq 0 ]; then\n   /bin/sleep 10\n    ${IC_COMMAND} exec -it ${CONTAINER_NAME}\
      \ sh load-data.sh\n    echo \"inventorydb created in mysql container. Done!\"\
      \n    exit 0\nfi\n"
- name: Deploy Standalone Inventory Microservice
  inputs:
  - type: job
    stage: Build Container Images
    job: Build Inventory Microservice Image
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${TEST_CONTAINER_NAME}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN}
    type: text
  - name: MYSQL_CONTAINER
    value: ${MYSQL_TEST_CONTAINER}
    type: text
  - name: INVENTORY_MSNAME
    value: ${NAME}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  - name: CONTAINER_SIZE
    value: '128'
    type: text
  - name: MEMORY
    value: '128'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '1'
    type: text
  - name: DESIRED_INSTANCES
    value: '1'
    type: text
  - name: MYSQL_DATABASE
    value: ${MYSQL_DATABASE}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    value: ${MYSQL_PASSWORD}
    type: secure
  jobs:
  - name: Deploy Inventory Microservice
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    DEPLOY_TYPE: red_black
    CONTAINER_NAME: ${TEST_CONTAINER_NAME}
    COMMAND: "#!/bin/bash\n# The following are some example deployment scripts.  Use\
      \ these as is or fork them and include your updates here:\necho -e \"${label_color}Starting\
      \ deployment script${no_color}\"\n\n\n# To view/fork this script goto: https://github.com/Osthanes/deployscripts\n\
      # git_retry will retry git calls to prevent pipeline failure on temporary github\
      \ problems\n# the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer\n\
      git_retry clone https://github.com/Osthanes/deployscripts.git deployscripts\n\
      \n# get MYSQL information\nlog_and_echo \"MySQL Container: ${MYSQL_CONTAINER}\"\
      \n$IC_COMMAND inspect $MYSQL_CONTAINER|grep -E 'MYSQL|HostIp|HostPort'|sed 's/[\"\
      |,|\\\" \\\"]//g'|sed 's/:/=/g' > mysql.env\n. mysql.env\nOPTIONAL_ARGS=\"${OPTIONAL_ARGS}\
      \ -e CG_NAME=${ROUTE_HOSTNAME} -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}\
      \ -e eureka.client.fetchRegistry=false -e eureka.client.registerWithEureka=false\
      \ -e \"spring.application.name=${INVENTORY_MSNAME}\" -e \"server.context-path=${CTXPATH}\"\
      \ -e \"spring.datasource.url=jdbc:mysql://${HostIp}:${HostPort}/${MYSQL_DATABASE}\"\
      \ -e \"spring.datasource.username=${MYSQL_USER}\" -e \"spring.datasource.password=${MYSQL_PASSWORD}\"\
      \"\nlog_and_echo \"Optional Args: ${OPTIONAL_ARGS}\"\n\nexport VALIDATE_ROUTE=1\n\
      \ \n# You can deploy your\
      \ Image as either a single Container or as a Container \n# Group.  A Container\
      \ Group deploys a number of containers to enhance\n# scalability or reliability.\
      \  By default we will deploy as a single \n# container.  To switch to a group\
      \ deploy, comment out the line below\n# containing deploycontainer.sh and uncomment\
      \ the line for deploygroup.sh\n\n# Deploy with containers:\n# Optional environment\
      \ properties (can be set directly in this script, or defined as environment\
      \ properties):\n#      NAME              Value         Description\n#   =============\
      \      =========     ==============\n#   BIND_TO             String       Specify\
      \ a Bluemix application name that whose bound services you wish to make available\
      \ to the container.  By default this is not set.\n#   CONTAINER_SIZE      String\
      \       Specify container size: pico (64), nano (128), micro (256), tiny (512),\
      \ small (1024), medium (2048),\n#                                          \
      \                  large (4096), x-large (8192), 2x-large (16384).\n#      \
      \                              Default is micro (256).\n#   CONCURRENT_VERSIONS\
      \ Number       Number of versions of this container to leave active.  \n#  \
      \                                  Default is 1\n#\n#/bin/bash deployscripts/deploycontainer.sh\n\
      \n# Deploy Container Group:\n# Optional environment properties (can be set directly\
      \ in this script, or defined as environment properties):\n#      NAME      \
      \        Value         Description\n#   =============      =========     ==============\n\
      #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry\
      \ Route you wish to assign to this container group.  By default this is not\
      \ set.\n#   ROUTE_DOMAIN        String       Specify domain name for the Cloud\
      \ Foundry Route you wish to assign to this container group.  By default this\
      \ is not set.\n#   BIND_TO             String       Specify a Bluemix application\
      \ name that whose bound services you wish to make available to the container.\
      \  By default this is not set.\n#   DESIRED_INSTANCES:  Number       Specify\
      \ the number of instances in the group.  Default value is 1.\n#   AUTO_RECOVERY:\
      \      Boolean      Set auto-recovery to true/false.  Default value is false.\n\
      \n#                                    Default is false.\n#   CONTAINER_SIZE\
      \      String       Specify container size: pico (64), nano (128), micro (256),\
      \ tiny (512), small (1024), medium (2048),\n#                              \
      \                              large (4096), x-large (8192), 2x-large (16384).\n\
      #                                    Default is micro (256).\n#   CONCURRENT_VERSIONS\
      \ Number       Number of versions of this group to leave active.\n#        \
      \                            Default is 1\n# IF YOU WANT CONTAINER GROUPS ..\
      \ uncomment the next line, and comment out the previous deployment line (/bin/bash\
      \ deployscripts/deploygroup.sh)\n/bin/bash deployscripts/deploygroup.sh\n\n\
      RESULT=$?\n\n# source the deploy property file\nif [ -f \"${DEPLOY_PROPERTY_FILE}\"\
      \ ]; then\n  source \"$DEPLOY_PROPERTY_FILE\"\nfi\n\n#########################\n\
      # Environment DETAILS   #\n#########################\n# The environment has\
      \ been setup.\n# The Cloud Foundry CLI (cf), IBM Container Service CLI (ice),\
      \ Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have\
      \ been installed.\n# Based on the organization and space selected in the Job\
      \ credentials are in place for both IBM Container Service and IBM Bluemix\n\n\
      # The following colors have been defined to help with presentation of logs:\
      \ green, red, label_color, no_color.\nif [ $RESULT -ne 0 ]; then\n    echo -e\
      \ \"${red}Executed failed or had warnings ${no_color}\"\n    ${EXT_DIR}/print_help.sh\n\
      \    exit $RESULT\nfi\necho -e \"${green}Execution complete${no_label}\""
- name: Contract Validation
  inputs:
  - type: job
    stage: BUILD
    job: Build
    dir_name: null
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${TEST_CONTAINER_NAME}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  jobs:
  - name: API Test
    type: tester
    script: |-
      #!/bin/bash
      # invoke tests here

      pip install requests

      cd validate

      python contract_validation.py https://${ROUTE_HOSTNAME}.${ROUTE_DOMAIN}${CTXPATH}
- name: Clean Standalone Inventory Microservice
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${TEST_CONTAINER_NAME}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN}
    type: text
  - name: CONTAINER_SIZE
    value: '128'
    type: text
  - name: MEMORY
    value: '128'
    type: text
  - name: IMAGE_NAME
    value: ${IMAGE_NAME}
    type: text
  jobs:
  - name: Clean Inventory Microservice
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${PORT}
    DEPLOY_TYPE: clean
    CONTAINER_NAME: ${NAME}
    COMMAND: |-
      #!/bin/bash
      # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
      echo -e "${label_color}Starting deployment script${no_color}"

      debugme() {
        [[ $DEBUG = 1 ]] && "$@" || :
      }

      ice_retry_save_output group list
      RESULT=$?
      if [ $RESULT -eq 0 ]; then
          GROUP_NAME_ARRAY=$(awk 'NR>=2 {print $2}' iceretry.log | grep ${CONTAINER_NAME})
      fi

      # loop through the array of the group name and check which one it need to keep
      for groupName in ${GROUP_NAME_ARRAY[@]}
      do
          # unmap router and remove the group
          log_and_echo "removing route $host $ROUTE_DOMAIN from ${groupName}"
          ice_retry route unmap --hostname ${ROUTE_HOSTNAME} --domain $ROUTE_DOMAIN ${groupName}
          RESULT=$?
          if [ $RESULT -ne 0 ]; then
              log_and_echo "$WARN" "'$IC_COMMAND route unmap --hostname ${ROUTE_HOSTNAME} --domain $ROUTE_DOMAIN ${groupName}' command failed with return code ${RESULT}"
          fi
          sleep 2

          log_and_echo "removing group ${groupName}"
          ice_retry group rm ${groupName}
          RESULT=$?
          if [ $RESULT -ne 0 ]; then
              log_and_echo "$WARN" "'$IC_COMMAND group rm ${groupName}' command failed with return code ${RESULT}"
              log_and_echo "$WARN" "Cleaning up previous deployments is not completed"
              return 0
          fi

      done

      # source the deploy property file
      if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
        source "$DEPLOY_PROPERTY_FILE"
      fi

      #########################
      # Environment DETAILS   #
      #########################
      # The environment has been setup.
      # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"
- name: 'Clean MySQL Container '
  triggers:
  - type: stage
  properties:
  - name: IMAGE_NAME
    value: ${IMAGE_NAME}
    type: text
  jobs:
  - name: Clean MySQL Container
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    PORT: ${MYSQL_PORT}
    DEPLOY_TYPE: clean
    CONTAINER_NAME: ${MYSQL_TEST_CONTAINER}
    COMMAND: "#!/bin/bash \n\nset -x\nCONTAINER_NAME=${CONTAINER_NAME}\n\ndebugme()\
      \ {\n  [[ $DEBUG = 1 ]] && \"$@\" || :\n}\n\nice_retry_save_output ps -a 2>\
      \ /dev/null\n\nCONTAINER_NAME_ARRAY=$(grep ${CONTAINER_NAME} iceretry.log |\
      \ awk '{print $2}')\n\nif [ -n \"${CONTAINER_NAME_ARRAY}\" ]; then\n\n  ice_retry\
      \ rm -f ${CONTAINER_NAME} 2> /dev/null\n  RESULT=$?\n  if [ $RESULT -ne 0 ];\
      \ then\n      log_and_echo \"$WARN\" \"'$IC_COMMAND rm -f ${CONTAINER_NAME}'\
      \ command failed with return code ${RESULT}\"\n      log_and_echo \"$WARN\"\
      \ \"Cleaning up previous deployments is not completed\"\n      return 0\n  fi\n\
      fi\n"
- name: Deploy Hybrid App
  triggers:
  - type: stage
  properties:
  - name: ROUTE_HOSTNAME
    value: ${NAME}
    type: text
  - name: ROUTE_DOMAIN
    value: ${DOMAIN}
    type: text
  - name: MYSQL_CONTAINER
    value: ${MYSQL_CONTAINER}
    type: text
  - name: EUREKA_REGISTRY_URL
    value: ${EUREKA_REGISTRY_URL}
    type: text
  - name: AUTO_RECOVERY
    value: 'true'
    type: text
  - name: MEMORY
    value: '128'
    type: text
  - name: MIN_INSTANCES
    value: '1'
    type: text
  - name: MAX_INSTANCES
    value: '3'
    type: text
  - name: DESIRED_INSTANCES
    value: '2'
    type: text
  - name: INVENTORY_MSNAME
    value: ${NAME}
    type: text
  - name: CTXPATH
    value: ${CTXPATH}
    type: text
  - name: NEW_RELIC_LICENSE_KEY
    value: ${NEW_RELIC_LICENSE}
    type: text
  - name: JDBC_URL
    value: ${JDBC_URL}
    type: text
  - name: MYSQL_USER
    value: ${MYSQL_USER}
    type: text
  - name: MYSQL_PASSWORD
    type: secure
    value: ${MYSQL_PASSWORD}
  - name: IMAGE_NAME
    value: ${IMAGE_NAME}
    type: text
  jobs:
  - name: Deploy Inventory Microservice Container Group
    type: deployer
    extension_id: ibm.devops.services.pipeline.docker.deploy.ice
    target:
      region_id: ${REGION}
      organization: ${ORG}
      space: ${SPACE}
    PORT: '8080'
    OPTIONAL_ARGS: -m ${MEMORY}
    CONTAINER_NAME: ${ROUTE_HOSTNAME}
    DEPLOY_TYPE: red_black
    COMMAND: |-
      #!/bin/sh

      # The following are some example deployment scripts.  Use these as is or fork them and include your updates here:
      echo -e "${label_color}Starting deployment script${no_color}"

      # To view/fork this script goto: https://github.com/Osthanes/deployscripts
      # git_retry will retry git calls to prevent pipeline failure on temporary github problems
      # the code can be found in git_util.sh at https://github.com/Osthanes/container_deployer
      git_retry clone https://github.com/ssibm/deployscripts.git deployscripts
      SPACE=$($IC_COMMAND info|grep 'Bluemix Space'|awk '{print $NF}'|sed "s/\(.*\)\((.*\)/\1/"
      )
      IMAGE_NAME=$(echo $IMAGE_NAME|sed "s/-$SPACE//")
      REGISTRY_URL=${CCS_REGISTRY_HOST}/${NAMESPACE}
      IMAGE_NAME=${REGISTRY_URL}/${IMAGE_NAME}:${SPACE}

      # get MYSQL information
      if [ -z "${JDBC_URL}" ]; then
          log_and_echo "MySQL Container: ${MYSQL_CONTAINER}"
          $IC_COMMAND inspect $MYSQL_CONTAINER|grep -E 'MYSQL|HostIp|HostPort'|sed 's/["|,|\" \"]//g'|sed 's/:/=/g' > mysql.env
          . mysql.env
          JDBC_URL=jdbc:mysql://${HostIp}:${HostPort}/${MYSQL_DATABASE}
      fi

      OPTIONAL_ARGS="${OPTIONAL_ARGS} -e CG_NAME=${ROUTE_HOSTNAME} -e NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY} -e eureka.client.fetchRegistry=true -e eureka.client.registerWithEureka=true -e "spring.application.name=${INVENTORY_MSNAME}" -e "server.context-path=${CTXPATH}" -e "eureka.client.serviceUrl.defaultZone=${EUREKA_REGISTRY_URL}" -e "spring.datasource.url=${JDBC_URL}" -e "spring.datasource.username=${MYSQL_USER}" -e "spring.datasource.password=${MYSQL_PASSWORD}""
      log_and_echo "Optional Args: ${OPTIONAL_ARGS}"

      # Deploy Container Group:
      # Optional environment properties (can be set directly in this script, or defined as environment properties):
      #      NAME              Value         Description
      #   =============      =========     ==============
      #   ROUTE_HOSTNAME      String       Specify the Hostname for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   ROUTE_DOMAIN        String       Specify domain name for the Cloud Foundry Route you wish to assign to this container group.  By default this is not set.
      #   BIND_TO             String       Specify a Bluemix application name that whose bound services you wish to make available to the container.  By default this is not set.
      #   DESIRED_INSTANCES:  Number       Specify the number of instances in the group.  Default value is 1.
      #   AUTO_RECOVERY:      Boolean      Set auto-recovery to true/false.  Default value is false.

      #                                    Default is false.
      #   CONTAINER_SIZE      String       Specify container size: pico (64), nano (128), micro (256), tiny (512), small (1024), medium (2048),
      #                                                            large (4096), x-large (8192), 2x-large (16384).
      #                                    Default is micro (256).
      #   CONCURRENT_VERSIONS Number       Number of versions of this group to leave active.
      #                                    Default is 1
      # IF YOU WANT CONTAINER GROUPS .. uncomment the next line, and comment out the previous deployment line (/bin/bash deployscripts/deploygroup.sh)
      /bin/bash deployscripts/deploygroup.sh

      RESULT=$?

      # source the deploy property file
      if [ -f "${DEPLOY_PROPERTY_FILE}" ]; then
        source "$DEPLOY_PROPERTY_FILE"
      fi

      #########################
      # Environment DETAILS   #
      #########################
      # The environment has been setup.
      # The Cloud Foundry CLI (cf), IBM Container Service CLI (ice), Git client (git), IDS Inventory CLI (ids-inv) and Python 2.7.3 (python) have been installed.
      # Based on the organization and space selected in the Job credentials are in place for both IBM Container Service and IBM Bluemix

      # The following colors have been defined to help with presentation of logs: green, red, label_color, no_color.
      if [ $RESULT -ne 0 ]; then
          echo -e "${red}Executed failed or had warnings ${no_color}"
          ${EXT_DIR}/print_help.sh
          exit $RESULT
      fi
      echo -e "${green}Execution complete${no_label}"
hooks:
- enabled: true
  label: null
  ssl_enabled: false
  url: https://devops-api.ng.bluemix.net/v1/messaging/webhook/publish
